// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: grpc/examples/helloworld/v1/helloworld.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterServiceClient is the client API for GreeterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterServiceClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
	ListGreetings(ctx context.Context, in *ListGreetingsRequest, opts ...grpc.CallOption) (GreeterService_ListGreetingsClient, error)
	RecordGreetings(ctx context.Context, opts ...grpc.CallOption) (GreeterService_RecordGreetingsClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (GreeterService_ChatClient, error)
}

type greeterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterServiceClient(cc grpc.ClientConnInterface) GreeterServiceClient {
	return &greeterServiceClient{cc}
}

func (c *greeterServiceClient) SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	out := new(SayHelloResponse)
	err := c.cc.Invoke(ctx, "/helloworld.v1.GreeterService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterServiceClient) ListGreetings(ctx context.Context, in *ListGreetingsRequest, opts ...grpc.CallOption) (GreeterService_ListGreetingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreeterService_ServiceDesc.Streams[0], "/helloworld.v1.GreeterService/ListGreetings", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServiceListGreetingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreeterService_ListGreetingsClient interface {
	Recv() (*ListGreetingsResponse, error)
	grpc.ClientStream
}

type greeterServiceListGreetingsClient struct {
	grpc.ClientStream
}

func (x *greeterServiceListGreetingsClient) Recv() (*ListGreetingsResponse, error) {
	m := new(ListGreetingsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterServiceClient) RecordGreetings(ctx context.Context, opts ...grpc.CallOption) (GreeterService_RecordGreetingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreeterService_ServiceDesc.Streams[1], "/helloworld.v1.GreeterService/RecordGreetings", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServiceRecordGreetingsClient{stream}
	return x, nil
}

type GreeterService_RecordGreetingsClient interface {
	Send(*RecordGreetingsRequest) error
	CloseAndRecv() (*RecordGreetingsResponse, error)
	grpc.ClientStream
}

type greeterServiceRecordGreetingsClient struct {
	grpc.ClientStream
}

func (x *greeterServiceRecordGreetingsClient) Send(m *RecordGreetingsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterServiceRecordGreetingsClient) CloseAndRecv() (*RecordGreetingsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RecordGreetingsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (GreeterService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreeterService_ServiceDesc.Streams[2], "/helloworld.v1.GreeterService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServiceChatClient{stream}
	return x, nil
}

type GreeterService_ChatClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type greeterServiceChatClient struct {
	grpc.ClientStream
}

func (x *greeterServiceChatClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterServiceChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServiceServer is the server API for GreeterService service.
// All implementations must embed UnimplementedGreeterServiceServer
// for forward compatibility
type GreeterServiceServer interface {
	// Sends a greeting
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	ListGreetings(*ListGreetingsRequest, GreeterService_ListGreetingsServer) error
	RecordGreetings(GreeterService_RecordGreetingsServer) error
	Chat(GreeterService_ChatServer) error
	mustEmbedUnimplementedGreeterServiceServer()
}

// UnimplementedGreeterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServiceServer struct {
}

func (UnimplementedGreeterServiceServer) SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServiceServer) ListGreetings(*ListGreetingsRequest, GreeterService_ListGreetingsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListGreetings not implemented")
}
func (UnimplementedGreeterServiceServer) RecordGreetings(GreeterService_RecordGreetingsServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordGreetings not implemented")
}
func (UnimplementedGreeterServiceServer) Chat(GreeterService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedGreeterServiceServer) mustEmbedUnimplementedGreeterServiceServer() {}

// UnsafeGreeterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServiceServer will
// result in compilation errors.
type UnsafeGreeterServiceServer interface {
	mustEmbedUnimplementedGreeterServiceServer()
}

func RegisterGreeterServiceServer(s grpc.ServiceRegistrar, srv GreeterServiceServer) {
	s.RegisterService(&GreeterService_ServiceDesc, srv)
}

func _GreeterService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.GreeterService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServiceServer).SayHello(ctx, req.(*SayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreeterService_ListGreetings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListGreetingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServiceServer).ListGreetings(m, &greeterServiceListGreetingsServer{stream})
}

type GreeterService_ListGreetingsServer interface {
	Send(*ListGreetingsResponse) error
	grpc.ServerStream
}

type greeterServiceListGreetingsServer struct {
	grpc.ServerStream
}

func (x *greeterServiceListGreetingsServer) Send(m *ListGreetingsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreeterService_RecordGreetings_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServiceServer).RecordGreetings(&greeterServiceRecordGreetingsServer{stream})
}

type GreeterService_RecordGreetingsServer interface {
	SendAndClose(*RecordGreetingsResponse) error
	Recv() (*RecordGreetingsRequest, error)
	grpc.ServerStream
}

type greeterServiceRecordGreetingsServer struct {
	grpc.ServerStream
}

func (x *greeterServiceRecordGreetingsServer) SendAndClose(m *RecordGreetingsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterServiceRecordGreetingsServer) Recv() (*RecordGreetingsRequest, error) {
	m := new(RecordGreetingsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreeterService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServiceServer).Chat(&greeterServiceChatServer{stream})
}

type GreeterService_ChatServer interface {
	Send(*ChatResponse) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type greeterServiceChatServer struct {
	grpc.ServerStream
}

func (x *greeterServiceChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterServiceChatServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterService_ServiceDesc is the grpc.ServiceDesc for GreeterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreeterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.GreeterService",
	HandlerType: (*GreeterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _GreeterService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListGreetings",
			Handler:       _GreeterService_ListGreetings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordGreetings",
			Handler:       _GreeterService_RecordGreetings_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _GreeterService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/examples/helloworld/v1/helloworld.proto",
}
